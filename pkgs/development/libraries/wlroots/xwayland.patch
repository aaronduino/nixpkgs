diff --git a/include/wlr/xwayland.h b/include/wlr/xwayland.h
index 7dcb3935..53822af5 100644
--- a/include/wlr/xwayland.h
+++ b/include/wlr/xwayland.h
@@ -27,6 +27,8 @@ struct wlr_xwayland_server {
 
 	time_t server_start;
 
+	int32_t scale;
+
 	/* Anything above display is reset on Xwayland restart, rest is conserved */
 
 	int display;
@@ -254,6 +256,8 @@ struct wlr_xwayland *wlr_xwayland_create(struct wl_display *wl_display,
 
 void wlr_xwayland_destroy(struct wlr_xwayland *wlr_xwayland);
 
+void wlr_xwayland_set_scale(struct wlr_xwayland *wlr_xwayland, int32_t scale);
+
 void wlr_xwayland_set_cursor(struct wlr_xwayland *wlr_xwayland,
 	uint8_t *pixels, uint32_t stride, uint32_t width, uint32_t height,
 	int32_t hotspot_x, int32_t hotspot_y);
diff --git a/include/xwayland/xwm.h b/include/xwayland/xwm.h
index 32b3135b..2f7b899e 100644
--- a/include/xwayland/xwm.h
+++ b/include/xwayland/xwm.h
@@ -113,6 +113,7 @@ struct wlr_xwm {
 	struct wlr_xwayland_surface *drag_focus;
 
 	const xcb_query_extension_reply_t *xfixes;
+	const xcb_query_extension_reply_t *xwayland_ext;
 #if WLR_HAS_XCB_ERRORS
 	xcb_errors_context_t *errors_context;
 #endif
@@ -147,4 +148,6 @@ char *xwm_get_atom_name(struct wlr_xwm *xwm, xcb_atom_t atom);
 bool xwm_atoms_contains(struct wlr_xwm *xwm, xcb_atom_t *atoms,
 	size_t num_atoms, enum atom_name needle);
 
+void xwm_scale_changed(struct wlr_xwm *xwm);
+
 #endif
diff --git a/xwayland/server.c b/xwayland/server.c
index 58ba1a8e..45c33cc9 100644
--- a/xwayland/server.c
+++ b/xwayland/server.c
@@ -467,6 +467,8 @@ struct wlr_xwayland_server *wlr_xwayland_server_create(
 	server->wl_fd[0] = server->wl_fd[1] = -1;
 	server->wm_fd[0] = server->wm_fd[1] = -1;
 
+	server->scale = 1;
+
 	wl_signal_init(&server->events.ready);
 	wl_signal_init(&server->events.destroy);
 
diff --git a/xwayland/xwayland.c b/xwayland/xwayland.c
index f0999120..cbe89b4e 100644
--- a/xwayland/xwayland.c
+++ b/xwayland/xwayland.c
@@ -105,6 +105,13 @@ struct wlr_xwayland *wlr_xwayland_create(struct wl_display *wl_display,
 	return xwayland;
 }
 
+void wlr_xwayland_set_scale(struct wlr_xwayland *xwayland, int32_t scale) {
+	xwayland->server->scale = scale;
+	if (xwayland->xwm != NULL) {
+			xwm_scale_changed(xwayland->xwm);
+	}
+}
+
 void wlr_xwayland_set_cursor(struct wlr_xwayland *xwayland,
 		uint8_t *pixels, uint32_t stride, uint32_t width, uint32_t height,
 		int32_t hotspot_x, int32_t hotspot_y) {
diff --git a/xwayland/xwm.c b/xwayland/xwm.c
index 25359834..9e81f381 100644
--- a/xwayland/xwm.c
+++ b/xwayland/xwm.c
@@ -16,9 +16,22 @@
 #include <xcb/render.h>
 #include <xcb/xcb_icccm.h>
 #include <xcb/xfixes.h>
+#include <xcb/xcbext.h>
 #include "util/signal.h"
 #include "xwayland/xwm.h"
 
+static int32_t scale(struct wlr_xwm *xwm, int32_t val) {
+	return val * xwm->xwayland->server->scale;
+}
+
+static int32_t unscale(struct wlr_xwm *xwm, int32_t val) {
+	return (val + xwm->xwayland->server->scale/2) / xwm->xwayland->server->scale;
+}
+
+static xcb_extension_t xwayland_ext_id = {
+	.name = "XWAYLAND",
+};
+
 const char *const atom_map[ATOM_LAST] = {
 	[WL_SURFACE_ID] = "WL_SURFACE_ID",
 	[WM_DELETE_WINDOW] = "WM_DELETE_WINDOW",
@@ -854,8 +867,13 @@ static void xwm_handle_create_notify(struct wlr_xwm *xwm,
 		return;
 	}
 
-	xwayland_surface_create(xwm, ev->window, ev->x, ev->y,
-		ev->width, ev->height, ev->override_redirect);
+	xwayland_surface_create(xwm, ev->window,
+		unscale(xwm, ev->x),
+		unscale(xwm, ev->y),
+		unscale(xwm, ev->width),
+		unscale(xwm, ev->height),
+		ev->override_redirect
+	);
 }
 
 static void xwm_handle_destroy_notify(struct wlr_xwm *xwm,
@@ -886,10 +904,10 @@ static void xwm_handle_configure_request(struct wlr_xwm *xwm,
 
 	struct wlr_xwayland_surface_configure_event wlr_event = {
 		.surface = surface,
-		.x = mask & XCB_CONFIG_WINDOW_X ? ev->x : surface->x,
-		.y = mask & XCB_CONFIG_WINDOW_Y ? ev->y : surface->y,
-		.width = mask & XCB_CONFIG_WINDOW_WIDTH ? ev->width : surface->width,
-		.height = mask & XCB_CONFIG_WINDOW_HEIGHT ? ev->height : surface->height,
+		.x = unscale(xwm, mask & XCB_CONFIG_WINDOW_X ? ev->x : surface->x),
+		.y = unscale(xwm, mask & XCB_CONFIG_WINDOW_Y ? ev->y : surface->y),
+		.width = unscale(xwm, mask & XCB_CONFIG_WINDOW_WIDTH ? ev->width : surface->width),
+		.height = unscale(xwm, mask & XCB_CONFIG_WINDOW_HEIGHT ? ev->height : surface->height),
 		.mask = mask,
 	};
 
@@ -904,14 +922,16 @@ static void xwm_handle_configure_notify(struct wlr_xwm *xwm,
 	}
 
 	bool geometry_changed =
-		(xsurface->x != ev->x || xsurface->y != ev->y ||
-		 xsurface->width != ev->width || xsurface->height != ev->height);
+		(xsurface->x != unscale(xwm, ev->x) ||
+		 xsurface->y != unscale(xwm, ev->y) ||
+		 xsurface->width != unscale(xwm, ev->width) ||
+		 xsurface->height != unscale(xwm, ev->height));
 
 	if (geometry_changed) {
-		xsurface->x = ev->x;
-		xsurface->y = ev->y;
-		xsurface->width = ev->width;
-		xsurface->height = ev->height;
+		xsurface->x = unscale(xwm, ev->x);
+		xsurface->y = unscale(xwm, ev->y);
+		xsurface->width = unscale(xwm, ev->width);
+		xsurface->height = unscale(xwm, ev->height);
 	}
 
 	if (xsurface->override_redirect != ev->override_redirect) {
@@ -1533,7 +1553,13 @@ void wlr_xwayland_surface_configure(struct wlr_xwayland_surface *xsurface,
 	uint32_t mask = XCB_CONFIG_WINDOW_X | XCB_CONFIG_WINDOW_Y |
 		XCB_CONFIG_WINDOW_WIDTH | XCB_CONFIG_WINDOW_HEIGHT |
 		XCB_CONFIG_WINDOW_BORDER_WIDTH;
-	uint32_t values[] = {x, y, width, height, 0};
+	uint32_t values[] = {
+		scale(xsurface->xwm, x),
+		scale(xsurface->xwm, y),
+		scale(xsurface->xwm, width),
+		scale(xsurface->xwm, height),
+		0,
+	};
 	xcb_configure_window(xwm->xcb_conn, xsurface->window_id, mask, values);
 	xcb_flush(xwm->xcb_conn);
 }
@@ -1621,6 +1647,7 @@ void xwm_destroy(struct wlr_xwm *xwm) {
 static void xwm_get_resources(struct wlr_xwm *xwm) {
 	xcb_prefetch_extension_data(xwm->xcb_conn, &xcb_xfixes_id);
 	xcb_prefetch_extension_data(xwm->xcb_conn, &xcb_composite_id);
+	xcb_prefetch_extension_data(xwm->xcb_conn, &xwayland_ext_id); // TODO what if extension is not present??
 
 	size_t i;
 	xcb_intern_atom_cookie_t cookies[ATOM_LAST];
@@ -1652,6 +1679,8 @@ static void xwm_get_resources(struct wlr_xwm *xwm) {
 		wlr_log(WLR_DEBUG, "xfixes not available");
 	}
 
+	xwm->xwayland_ext = xcb_get_extension_data(xwm->xcb_conn, &xwayland_ext_id);
+
 	xcb_xfixes_query_version_cookie_t xfixes_cookie;
 	xcb_xfixes_query_version_reply_t *xfixes_reply;
 	xfixes_cookie =
@@ -2016,3 +2045,39 @@ enum wlr_xwayland_icccm_input_model wlr_xwayland_icccm_input_model(
 	}
 	return WLR_ICCCM_INPUT_MODEL_NONE;
 }
+
+
+typedef struct {
+	uint8_t      major_opcode;
+	uint8_t      minor_opcode;
+	uint16_t     length;
+	uint16_t     screen;
+	uint16_t     scale;
+} xwayland_ext_set_scale_request_t;
+
+void xwm_scale_changed(struct wlr_xwm *xwm) {
+	xcb_protocol_request_t req = {
+		.count = 1,
+		.ext = &xwayland_ext_id,
+		.opcode = 1,
+		.isvoid = false,
+	};
+
+	xwayland_ext_set_scale_request_t xcb_out = {
+		.screen = 0,
+		.scale = xwm->xwayland->server->scale,
+	};
+
+	struct iovec xcb_parts[3];
+	xcb_parts[2].iov_base = (char *) &xcb_out;
+	xcb_parts[2].iov_len = sizeof(xcb_out);
+	xcb_send_request(xwm->xcb_conn, 0, xcb_parts+2, &req);
+
+	// Reconfigure all surfaces with the new scale.
+	struct wlr_xwayland_surface *surface;
+	wl_list_for_each(surface, &xwm->surfaces, link) {
+		wlr_xwayland_surface_configure(surface, surface->x, surface->y, surface->width, surface->height);
+	}
+
+	xcb_flush(xwm->xcb_conn);
+}
